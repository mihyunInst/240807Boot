캐시(Cache)
정의: 자주 쓰는 데이터를 임시로 저장해두는 공간
목적: 웹사이트 로딩 속도를 빠르게 하기 위해서 사용
예시: 자주 방문하는 사이트의 이미지나 CSS 파일 등을 캐시에 저장해두면, 다시 방문할 때 서버에서 새로 받지 않고 캐시에 저장된 파일을 불러옴
조작 : 클라이언트와 서버 모두 조작 가능.

쿠키(Cookie)
정의: 웹사이트가 사용자의 브라우저에 저장하는 작은 데이터 조각
목적: 로그인 상태 유지, 사용자 설정 저장, 방문 기록 등을 관리하기 위해 사용
예시: 로그인 상태 유지(자동 로그인)나, 장바구니 정보가 쿠키를 통해 저장됨
조작 : 클라이언트와 서버 모두 조작 가능.

세션(Session)
정의: 웹 서버가 사용자별로 상태를 유지하기 위해 서버에 저장하는 데이터
목적: 로그인 정보를 안전하게 서버에서 관리해, 브라우저를 닫아도 세션이 유지됨(필요할 때 자동 로그아웃도 가능).
예시: 사용자가 로그인할 때 세션이 생성되고, 서버에 로그인 정보를 저장하여 페이지를 이동해도 로그인 상태가 유지됨
조작 : 서버만 조작 가능, 클라이언트는 세션 ID만 간접적으로 확인.

정리하면:
캐시는 웹사이트 로딩을 빠르게 해주는 "임시 저장소".
쿠키는 웹사이트가 사용자를 기억하기 위해 브라우저에 남기는 "작은 데이터".
세션은 서버가 사용자 상태를 유지하기 위해 관리하는 "서버 측 데이터".

---------
조작에 관하여..

캐시(Cache)
클라이언트와 서버 모두 조작할 수 있습니다.
클라이언트 측: 사용자는 브라우저 설정에서 캐시를 삭제하거나 개발자 도구로 특정 사이트의 캐시를 비울 수 있습니다.
서버 측: 서버는 리소스의 캐시 유효 기간을 설정하거나, 필요시 캐시 무효화(Invalidation)를 통해 캐시된 데이터를 강제로 갱신하게 할 수 있습니다.

쿠키(Cookie)
클라이언트와 서버 모두 조작할 수 있습니다.
클라이언트 측: 사용자는 브라우저에서 특정 쿠키를 삭제하거나 전체 쿠키를 관리할 수 있습니다.
서버 측: 서버는 쿠키를 생성해 클라이언트에 전송하고, 유효 기간을 지정하거나 쿠키의 내용을 업데이트할 수 있습니다.

세션(Session)
서버만 조작할 수 있습니다.
서버 측: 세션 데이터는 서버에 저장되어 서버가 생성, 관리, 삭제를 담당합니다. 서버는 세션 만료 시간을 설정하거나 필요시 세션을 무효화할 수 있습니다.
클라이언트 측: 세션 ID만 브라우저에 쿠키로 저장되며, 사용자는 세션 ID만 간접적으로 확인할 뿐, 실제 세션 데이터는 서버에 있기 때문에 조작할 수 없습니다.


----------


로그인 정보를 기억하는 것은 쿠키와 세션을 통해 모두 가능.
다만, 사용 목적과 보안 요구 사항에 따라 선택하는 방식이 달라집니다.

<쿠키를 사용한 로그인 정보 기억>
자동 로그인: 쿠키에 사용자의 로그인 정보를 저장하여 브라우저를 닫았다가 다시 열어도 로그인 상태를 유지하게 할 수 있습니다.
장점: 사용자가 로그아웃하지 않는 한 계속 유지되므로 편리합니다.
단점: 쿠키에 민감한 정보를 저장할 경우, 보안 취약점이 발생할 수 있습니다. 
따라서 민감한 정보는 암호화하거나 토큰(JWT) 같은 방법을 사용합니다.

<세션을 사용한 로그인 정보 기억>
로그인 상태 유지: 세션은 서버에서 로그인 정보를 관리하기 때문에 사용자가 웹 사이트에 머무는 동안(브라우저가 열려있는 동안) 
로그인 상태를 유지합니다.
장점: 서버에서 관리하므로 보안에 유리하고, 민감한 정보는 클라이언트에 노출되지 않습니다.
단점: 세션은 보통 브라우저를 닫거나 일정 시간이 지나면 만료됩니다(세션 타임아웃). 
즉, 브라우저를 다시 열면 로그인이 풀릴 수 있습니다.
